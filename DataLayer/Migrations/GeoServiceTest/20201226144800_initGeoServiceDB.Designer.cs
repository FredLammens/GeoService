// <auto-generated />
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations.GeoServiceTest
{
    [DbContext(typeof(GeoServiceTestContext))]
    [Migration("20201226144800_initGeoServiceDB")]
    partial class initGeoServiceDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DCountryDRiver", b =>
                {
                    b.Property<long>("CountriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("RiversId")
                        .HasColumnType("bigint");

                    b.HasKey("CountriesId", "RiversId");

                    b.HasIndex("RiversId");

                    b.ToTable("DCountryDRiver");
                });

            modelBuilder.Entity("DataLayer.BaseClasses.DCity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<long?>("DCountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DCountryId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DCountryId");

                    b.HasIndex("DCountryId1");

                    b.ToTable("DCity");
                });

            modelBuilder.Entity("DataLayer.BaseClasses.DContinent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Population")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("DataLayer.BaseClasses.DCountry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<long?>("DContinentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.Property<float>("Surface")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DContinentId");

                    b.ToTable("DCountry");
                });

            modelBuilder.Entity("DataLayer.BaseClasses.DRiver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rivers");
                });

            modelBuilder.Entity("DCountryDRiver", b =>
                {
                    b.HasOne("DataLayer.BaseClasses.DCountry", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.BaseClasses.DRiver", null)
                        .WithMany()
                        .HasForeignKey("RiversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.BaseClasses.DCity", b =>
                {
                    b.HasOne("DataLayer.BaseClasses.DCountry", null)
                        .WithMany("Capitals")
                        .HasForeignKey("DCountryId");

                    b.HasOne("DataLayer.BaseClasses.DCountry", null)
                        .WithMany("Cities")
                        .HasForeignKey("DCountryId1");
                });

            modelBuilder.Entity("DataLayer.BaseClasses.DCountry", b =>
                {
                    b.HasOne("DataLayer.BaseClasses.DContinent", null)
                        .WithMany("Countries")
                        .HasForeignKey("DContinentId");
                });

            modelBuilder.Entity("DataLayer.BaseClasses.DContinent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("DataLayer.BaseClasses.DCountry", b =>
                {
                    b.Navigation("Capitals");

                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
